/****************************************************************************
 *   Copyright (c) 2018 Zheng Lei (realthunder) <realthunder.dev@gmail.com> *
 *                                                                          *
 *   This file is part of the FreeCAD CAx development system.               *
 *                                                                          *
 *   This library is free software; you can redistribute it and/or          *
 *   modify it under the terms of the GNU Library General Public            *
 *   License as published by the Free Software Foundation; either           *
 *   version 2 of the License, or (at your option) any later version.       *
 *                                                                          *
 *   This library  is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *   GNU Library General Public License for more details.                   *
 *                                                                          *
 *   You should have received a copy of the GNU Library General Public      *
 *   License along with this library; see the file COPYING.LIB. If not,     *
 *   write to the Free Software Foundation, Inc., 59 Temple Place,          *
 *   Suite 330, Boston, MA  02111-1307, USA                                 *
 *                                                                          *
 ****************************************************************************/

#ifndef GUI_VIEW_PARAMS_H
#define GUI_VIEW_PARAMS_H

#ifdef FC_OS_MACOSX
#   define FC_ENABLE_MENUBAR_CHECKBOX false
#else
#   define FC_ENABLE_MENUBAR_CHECKBOX true
#endif

/*[[[cog
import ViewParams
ViewParams.declare_begin()
]]]*/

// Auto generated code (Gui/ViewParams.py:451)
#include <QString>

// Auto generated code (Tools/params_utils.py:82)
#include <Base/Parameter.h>


// Auto generated code (Tools/params_utils.py:90)
namespace Gui {
/** Convenient class to obtain view provider related parameters

 * The parameters are under group "User parameter:BaseApp/Preferences/View"
 *
 * This class is auto generated by Gui/ViewParams.py. Modify that file
 * instead of this one, if you want to add any parameter. You need
 * to install Cog Python package for code generation:
 * @code
 *     pip install cogapp
 * @endcode
 *
 * Once modified, you can regenerate the header and the source file,
 * @code
 *     python3 -m cogapp -r Gui/ViewParams.h Gui/ViewParams.cpp
 * @endcode
 *
 * You can add a new parameter by adding lines in Gui/ViewParams.py. Available
 * parameter types are 'Int, UInt, String, Bool, Float'. For example, to add
 * a new Int type parameter,
 * @code
 *     ParamInt(parameter_name, default_value, documentation, on_change=False)
 * @endcode
 *
 * If there is special handling on parameter change, pass in on_change=True.
 * And you need to provide a function implementation in Gui/ViewParams.cpp with
 * the following signature.
 * @code
 *     void ViewParams:on<parameter_name>Changed()
 * @endcode
 */
class GuiExport ViewParams {
public:
    static ParameterGrp::handle getHandle();

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter UseNewSelection
    static const bool & getUseNewSelection();
    static const bool & defaultUseNewSelection();
    static void removeUseNewSelection();
    static void setUseNewSelection(const bool &v);
    static const char *docUseNewSelection();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter UseSelectionRoot
    static const bool & getUseSelectionRoot();
    static const bool & defaultUseSelectionRoot();
    static void removeUseSelectionRoot();
    static void setUseSelectionRoot(const bool &v);
    static const char *docUseSelectionRoot();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter EnableSelection
    static const bool & getEnableSelection();
    static const bool & defaultEnableSelection();
    static void removeEnableSelection();
    static void setEnableSelection(const bool &v);
    static const char *docEnableSelection();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter EnablePreselection
    static const bool & getEnablePreselection();
    static const bool & defaultEnablePreselection();
    static void removeEnablePreselection();
    static void setEnablePreselection(const bool &v);
    static const char *docEnablePreselection();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderCache
    static const long & getRenderCache();
    static const long & defaultRenderCache();
    static void removeRenderCache();
    static void setRenderCache(const long &v);
    static const char *docRenderCache();
    static void onRenderCacheChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RandomColor
    static const bool & getRandomColor();
    static const bool & defaultRandomColor();
    static void removeRandomColor();
    static void setRandomColor(const bool &v);
    static const char *docRandomColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter BoundingBoxColor
    static const unsigned long & getBoundingBoxColor();
    static const unsigned long & defaultBoundingBoxColor();
    static void removeBoundingBoxColor();
    static void setBoundingBoxColor(const unsigned long &v);
    static const char *docBoundingBoxColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter AnnotationTextColor
    static const unsigned long & getAnnotationTextColor();
    static const unsigned long & defaultAnnotationTextColor();
    static void removeAnnotationTextColor();
    static void setAnnotationTextColor(const unsigned long &v);
    static const char *docAnnotationTextColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HighlightColor
    static const unsigned long & getHighlightColor();
    static const unsigned long & defaultHighlightColor();
    static void removeHighlightColor();
    static void setHighlightColor(const unsigned long &v);
    static const char *docHighlightColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionColor
    static const unsigned long & getSelectionColor();
    static const unsigned long & defaultSelectionColor();
    static void removeSelectionColor();
    static void setSelectionColor(const unsigned long &v);
    static const char *docSelectionColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter MarkerSize
    static const long & getMarkerSize();
    static const long & defaultMarkerSize();
    static void removeMarkerSize();
    static void setMarkerSize(const long &v);
    static const char *docMarkerSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultLinkColor
    static const unsigned long & getDefaultLinkColor();
    static const unsigned long & defaultDefaultLinkColor();
    static void removeDefaultLinkColor();
    static void setDefaultLinkColor(const unsigned long &v);
    static const char *docDefaultLinkColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultShapeLineColor
    static const unsigned long & getDefaultShapeLineColor();
    static const unsigned long & defaultDefaultShapeLineColor();
    static void removeDefaultShapeLineColor();
    static void setDefaultShapeLineColor(const unsigned long &v);
    static const char *docDefaultShapeLineColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultShapeVertexColor
    static const unsigned long & getDefaultShapeVertexColor();
    static const unsigned long & defaultDefaultShapeVertexColor();
    static void removeDefaultShapeVertexColor();
    static void setDefaultShapeVertexColor(const unsigned long &v);
    static const char *docDefaultShapeVertexColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultShapeColor
    static const unsigned long & getDefaultShapeColor();
    static const unsigned long & defaultDefaultShapeColor();
    static void removeDefaultShapeColor();
    static void setDefaultShapeColor(const unsigned long &v);
    static const char *docDefaultShapeColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultShapeTransparency
    static const long & getDefaultShapeTransparency();
    static const long & defaultDefaultShapeTransparency();
    static void removeDefaultShapeTransparency();
    static void setDefaultShapeTransparency(const long &v);
    static const char *docDefaultShapeTransparency();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultShapeLineWidth
    static const long & getDefaultShapeLineWidth();
    static const long & defaultDefaultShapeLineWidth();
    static void removeDefaultShapeLineWidth();
    static void setDefaultShapeLineWidth(const long &v);
    static const char *docDefaultShapeLineWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultShapePointSize
    static const long & getDefaultShapePointSize();
    static const long & defaultDefaultShapePointSize();
    static void removeDefaultShapePointSize();
    static void setDefaultShapePointSize(const long &v);
    static const char *docDefaultShapePointSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter CoinCycleCheck
    static const bool & getCoinCycleCheck();
    static const bool & defaultCoinCycleCheck();
    static void removeCoinCycleCheck();
    static void setCoinCycleCheck(const bool &v);
    static const char *docCoinCycleCheck();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter EnablePropertyViewForInactiveDocument
    static const bool & getEnablePropertyViewForInactiveDocument();
    static const bool & defaultEnablePropertyViewForInactiveDocument();
    static void removeEnablePropertyViewForInactiveDocument();
    static void setEnablePropertyViewForInactiveDocument(const bool &v);
    static const char *docEnablePropertyViewForInactiveDocument();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowSelectionBoundingBox
    ///
    /// Show selection bounding box
    static const bool & getShowSelectionBoundingBox();
    static const bool & defaultShowSelectionBoundingBox();
    static void removeShowSelectionBoundingBox();
    static void setShowSelectionBoundingBox(const bool &v);
    static const char *docShowSelectionBoundingBox();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowSelectionBoundingBoxThreshold
    ///
    /// Threshold for showing bounding box instead of selection highlight
    static const long & getShowSelectionBoundingBoxThreshold();
    static const long & defaultShowSelectionBoundingBoxThreshold();
    static void removeShowSelectionBoundingBoxThreshold();
    static void setShowSelectionBoundingBoxThreshold(const long &v);
    static const char *docShowSelectionBoundingBoxThreshold();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter UpdateSelectionVisual
    static const bool & getUpdateSelectionVisual();
    static const bool & defaultUpdateSelectionVisual();
    static void removeUpdateSelectionVisual();
    static void setUpdateSelectionVisual(const bool &v);
    static const char *docUpdateSelectionVisual();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter LinkChildrenDirect
    static const bool & getLinkChildrenDirect();
    static const bool & defaultLinkChildrenDirect();
    static void removeLinkChildrenDirect();
    static void setLinkChildrenDirect(const bool &v);
    static const char *docLinkChildrenDirect();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowSelectionOnTop
    ///
    /// Show selection always on top
    static const bool & getShowSelectionOnTop();
    static const bool & defaultShowSelectionOnTop();
    static void removeShowSelectionOnTop();
    static void setShowSelectionOnTop(const bool &v);
    static const char *docShowSelectionOnTop();
    static void onShowSelectionOnTopChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowPreSelectedFaceOnTop
    ///
    /// Show pre-selected face always on top
    static const bool & getShowPreSelectedFaceOnTop();
    static const bool & defaultShowPreSelectedFaceOnTop();
    static void removeShowPreSelectedFaceOnTop();
    static void setShowPreSelectedFaceOnTop(const bool &v);
    static const char *docShowPreSelectedFaceOnTop();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowPreSelectedFaceOutline
    ///
    /// Show pre-selected face outline
    static const bool & getShowPreSelectedFaceOutline();
    static const bool & defaultShowPreSelectedFaceOutline();
    static void removeShowPreSelectedFaceOutline();
    static void setShowPreSelectedFaceOutline(const bool &v);
    static const char *docShowPreSelectedFaceOutline();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowSelectedFaceOutline
    ///
    /// Show selected face outline
    static const bool & getShowSelectedFaceOutline();
    static const bool & defaultShowSelectedFaceOutline();
    static void removeShowSelectedFaceOutline();
    static void setShowSelectedFaceOutline(const bool &v);
    static const char *docShowSelectedFaceOutline();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter OutlineThicken
    ///
    /// Muplication factor to increase outline width of the selected face.
    static const double & getOutlineThicken();
    static const double & defaultOutlineThicken();
    static void removeOutlineThicken();
    static void setOutlineThicken(const double &v);
    static const char *docOutlineThicken();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter NoSelFaceHighlightWithOutline
    ///
    /// Do not highlight selected face if outline is enabled
    static const bool & getNoSelFaceHighlightWithOutline();
    static const bool & defaultNoSelFaceHighlightWithOutline();
    static void removeNoSelFaceHighlightWithOutline();
    static void setNoSelFaceHighlightWithOutline(const bool &v);
    static const char *docNoSelFaceHighlightWithOutline();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter NoPreSelFaceHighlightWithOutline
    ///
    /// Do not highlight pre-selected face if outline is enabled
    static const bool & getNoPreSelFaceHighlightWithOutline();
    static const bool & defaultNoPreSelFaceHighlightWithOutline();
    static void removeNoPreSelFaceHighlightWithOutline();
    static void setNoPreSelFaceHighlightWithOutline(const bool &v);
    static const char *docNoPreSelFaceHighlightWithOutline();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter AutoTransparentPick
    ///
    /// Make pre-selected object transparent for picking hidden lines
    static const bool & getAutoTransparentPick();
    static const bool & defaultAutoTransparentPick();
    static void removeAutoTransparentPick();
    static void setAutoTransparentPick(const bool &v);
    static const char *docAutoTransparentPick();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectElementOnTop
    ///
    /// Do box/lasso element selection on already selected object(sg if SelectionOnTop is enabled.
    static const bool & getSelectElementOnTop();
    static const bool & defaultSelectElementOnTop();
    static void removeSelectElementOnTop();
    static void setSelectElementOnTop(const bool &v);
    static const char *docSelectElementOnTop();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter TransparencyOnTop
    ///
    /// Transparency for the selected object when being shown on top.
    static const double & getTransparencyOnTop();
    static const double & defaultTransparencyOnTop();
    static void removeTransparencyOnTop();
    static void setTransparencyOnTop(const double &v);
    static const char *docTransparencyOnTop();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineSync
    ///
    /// Specifies how to sync hidden line draw style settings to opened document
    static const long & getHiddenLineSync();
    static const long & defaultHiddenLineSync();
    static void removeHiddenLineSync();
    static void setHiddenLineSync(const long &v);
    static const char *docHiddenLineSync();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineSelectionOnTop
    ///
    /// Enable hidden line/point selection when SelectionOnTop is active.
    static const bool & getHiddenLineSelectionOnTop();
    static const bool & defaultHiddenLineSelectionOnTop();
    static void removeHiddenLineSelectionOnTop();
    static void setHiddenLineSelectionOnTop(const bool &v);
    static const char *docHiddenLineSelectionOnTop();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PartialHighlightOnFullSelect
    ///
    /// Enable partial highlight on full selection for object that supports it.
    static const bool & getPartialHighlightOnFullSelect();
    static const bool & defaultPartialHighlightOnFullSelect();
    static void removePartialHighlightOnFullSelect();
    static void setPartialHighlightOnFullSelect(const bool &v);
    static const char *docPartialHighlightOnFullSelect();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionLineThicken
    ///
    /// Muplication factor to increase the width of the selected line.
    static const double & getSelectionLineThicken();
    static const double & defaultSelectionLineThicken();
    static void removeSelectionLineThicken();
    static void setSelectionLineThicken(const double &v);
    static const char *docSelectionLineThicken();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionLineMaxWidth
    ///
    /// Limit the selected line width when applying line thickening.
    static const double & getSelectionLineMaxWidth();
    static const double & defaultSelectionLineMaxWidth();
    static void removeSelectionLineMaxWidth();
    static void setSelectionLineMaxWidth(const double &v);
    static const char *docSelectionLineMaxWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionPointScale
    ///
    /// Muplication factor to increase the size of the selected point.
    /// If zero, then use line multiplication factor.
    static const double & getSelectionPointScale();
    static const double & defaultSelectionPointScale();
    static void removeSelectionPointScale();
    static void setSelectionPointScale(const double &v);
    static const char *docSelectionPointScale();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionPointMaxSize
    ///
    /// Limit the selected point size when applying size scale.
    static const double & getSelectionPointMaxSize();
    static const double & defaultSelectionPointMaxSize();
    static void removeSelectionPointMaxSize();
    static void setSelectionPointMaxSize(const double &v);
    static const char *docSelectionPointMaxSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PickRadius
    static const double & getPickRadius();
    static const double & defaultPickRadius();
    static void removePickRadius();
    static void setPickRadius(const double &v);
    static const char *docPickRadius();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionTransparency
    static const double & getSelectionTransparency();
    static const double & defaultSelectionTransparency();
    static void removeSelectionTransparency();
    static void setSelectionTransparency(const double &v);
    static const char *docSelectionTransparency();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionLinePattern
    static const long & getSelectionLinePattern();
    static const long & defaultSelectionLinePattern();
    static void removeSelectionLinePattern();
    static void setSelectionLinePattern(const long &v);
    static const char *docSelectionLinePattern();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionLinePatternScale
    static const long & getSelectionLinePatternScale();
    static const long & defaultSelectionLinePatternScale();
    static void removeSelectionLinePatternScale();
    static void setSelectionLinePatternScale(const long &v);
    static const char *docSelectionLinePatternScale();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionHiddenLineWidth
    ///
    /// Width of the hidden line.
    static const double & getSelectionHiddenLineWidth();
    static const double & defaultSelectionHiddenLineWidth();
    static void removeSelectionHiddenLineWidth();
    static void setSelectionHiddenLineWidth(const double &v);
    static const char *docSelectionHiddenLineWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionBBoxLineWidth
    static const double & getSelectionBBoxLineWidth();
    static const double & defaultSelectionBBoxLineWidth();
    static void removeSelectionBBoxLineWidth();
    static void setSelectionBBoxLineWidth(const double &v);
    static const char *docSelectionBBoxLineWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowHighlightEdgeOnly
    ///
    /// Show pre-selection highlight edge only
    static const bool & getShowHighlightEdgeOnly();
    static const bool & defaultShowHighlightEdgeOnly();
    static void removeShowHighlightEdgeOnly();
    static void setShowHighlightEdgeOnly(const bool &v);
    static const char *docShowHighlightEdgeOnly();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PreSelectionDelay
    static const double & getPreSelectionDelay();
    static const double & defaultPreSelectionDelay();
    static void removePreSelectionDelay();
    static void setPreSelectionDelay(const double &v);
    static const char *docPreSelectionDelay();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PickBackFaceDelay
    static const long & getPickBackFaceDelay();
    static const long & defaultPickBackFaceDelay();
    static void removePickBackFaceDelay();
    static void setPickBackFaceDelay(const long &v);
    static const char *docPickBackFaceDelay();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter UseNewRayPick
    static const bool & getUseNewRayPick();
    static const bool & defaultUseNewRayPick();
    static void removeUseNewRayPick();
    static void setUseNewRayPick(const bool &v);
    static const char *docUseNewRayPick();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ViewSelectionExtendFactor
    static const double & getViewSelectionExtendFactor();
    static const double & defaultViewSelectionExtendFactor();
    static void removeViewSelectionExtendFactor();
    static void setViewSelectionExtendFactor(const double &v);
    static const char *docViewSelectionExtendFactor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter UseTightBoundingBox
    ///
    /// Show more accurate bounds when using bounding box selection style
    static const bool & getUseTightBoundingBox();
    static const bool & defaultUseTightBoundingBox();
    static void removeUseTightBoundingBox();
    static void setUseTightBoundingBox(const bool &v);
    static const char *docUseTightBoundingBox();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter UseBoundingBoxCache
    static const bool & getUseBoundingBoxCache();
    static const bool & defaultUseBoundingBoxCache();
    static void removeUseBoundingBoxCache();
    static void setUseBoundingBoxCache(const bool &v);
    static const char *docUseBoundingBoxCache();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderProjectedBBox
    ///
    /// Show projected bounding box that is aligned to axes of
    /// global coordinate space
    static const bool & getRenderProjectedBBox();
    static const bool & defaultRenderProjectedBBox();
    static void removeRenderProjectedBBox();
    static void setRenderProjectedBBox(const bool &v);
    static const char *docRenderProjectedBBox();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionFaceWire
    ///
    /// Show hidden tirangulation wires for selected face
    static const bool & getSelectionFaceWire();
    static const bool & defaultSelectionFaceWire();
    static void removeSelectionFaceWire();
    static void setSelectionFaceWire(const bool &v);
    static const char *docSelectionFaceWire();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter NewDocumentCameraScale
    static const double & getNewDocumentCameraScale();
    static const double & defaultNewDocumentCameraScale();
    static void removeNewDocumentCameraScale();
    static void setNewDocumentCameraScale(const double &v);
    static const char *docNewDocumentCameraScale();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter MaxOnTopSelections
    static const long & getMaxOnTopSelections();
    static const long & defaultMaxOnTopSelections();
    static void removeMaxOnTopSelections();
    static void setMaxOnTopSelections(const long &v);
    static const char *docMaxOnTopSelections();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter MaxViewSelections
    static const long & getMaxViewSelections();
    static const long & defaultMaxViewSelections();
    static void removeMaxViewSelections();
    static void setMaxViewSelections(const long &v);
    static const char *docMaxViewSelections();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter MaxSelectionNotification
    static const long & getMaxSelectionNotification();
    static const long & defaultMaxSelectionNotification();
    static void removeMaxSelectionNotification();
    static void setMaxSelectionNotification(const long &v);
    static const char *docMaxSelectionNotification();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter MapChildrenPlacement
    ///
    /// Map child object into parent's coordinate space when showing on top.
    /// Note that once activated, this option will also activate option ShowOnTop.
    /// WARNING! This is an experimental option. Please use with caution.
    static const bool & getMapChildrenPlacement();
    static const bool & defaultMapChildrenPlacement();
    static void removeMapChildrenPlacement();
    static void setMapChildrenPlacement(const bool &v);
    static const char *docMapChildrenPlacement();
    static void onMapChildrenPlacementChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter EditingTransparency
    ///
    /// Automatically make all object transparent except the one in edit
    static const double & getEditingTransparency();
    static const double & defaultEditingTransparency();
    static void removeEditingTransparency();
    static void setEditingTransparency(const double &v);
    static const char *docEditingTransparency();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineTransparency
    ///
    /// Overridden transparency value of all objects in the scene.
    static const double & getHiddenLineTransparency();
    static const double & defaultHiddenLineTransparency();
    static void removeHiddenLineTransparency();
    static void setHiddenLineTransparency(const double &v);
    static const char *docHiddenLineTransparency();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineOverrideTransparency
    ///
    /// Whether to override transparency of all objects in the scene.
    static const bool & getHiddenLineOverrideTransparency();
    static const bool & defaultHiddenLineOverrideTransparency();
    static void removeHiddenLineOverrideTransparency();
    static void setHiddenLineOverrideTransparency(const bool &v);
    static const char *docHiddenLineOverrideTransparency();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineFaceColor
    static const unsigned long & getHiddenLineFaceColor();
    static const unsigned long & defaultHiddenLineFaceColor();
    static void removeHiddenLineFaceColor();
    static void setHiddenLineFaceColor(const unsigned long &v);
    static const char *docHiddenLineFaceColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineOverrideFaceColor
    ///
    /// Enable preselection and highlight by specified color.
    static const bool & getHiddenLineOverrideFaceColor();
    static const bool & defaultHiddenLineOverrideFaceColor();
    static void removeHiddenLineOverrideFaceColor();
    static void setHiddenLineOverrideFaceColor(const bool &v);
    static const char *docHiddenLineOverrideFaceColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineColor
    static const unsigned long & getHiddenLineColor();
    static const unsigned long & defaultHiddenLineColor();
    static void removeHiddenLineColor();
    static void setHiddenLineColor(const unsigned long &v);
    static const char *docHiddenLineColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineOverrideColor
    ///
    /// Enable selection highlighting and use specified color
    static const bool & getHiddenLineOverrideColor();
    static const bool & defaultHiddenLineOverrideColor();
    static void removeHiddenLineOverrideColor();
    static void setHiddenLineOverrideColor(const bool &v);
    static const char *docHiddenLineOverrideColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineBackground
    static const unsigned long & getHiddenLineBackground();
    static const unsigned long & defaultHiddenLineBackground();
    static void removeHiddenLineBackground();
    static void setHiddenLineBackground(const unsigned long &v);
    static const char *docHiddenLineBackground();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineOverrideBackground
    static const bool & getHiddenLineOverrideBackground();
    static const bool & defaultHiddenLineOverrideBackground();
    static void removeHiddenLineOverrideBackground();
    static void setHiddenLineOverrideBackground(const bool &v);
    static const char *docHiddenLineOverrideBackground();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineShaded
    ///
    /// Whether to enable shading in hidden line draw style
    static const bool & getHiddenLineShaded();
    static const bool & defaultHiddenLineShaded();
    static void removeHiddenLineShaded();
    static void setHiddenLineShaded(const bool &v);
    static const char *docHiddenLineShaded();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineShowOutline
    ///
    /// Show outline in hidden line draw style (only works in experiemental renderer),.
    static const bool & getHiddenLineShowOutline();
    static const bool & defaultHiddenLineShowOutline();
    static void removeHiddenLineShowOutline();
    static void setHiddenLineShowOutline(const bool &v);
    static const char *docHiddenLineShowOutline();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLinePerFaceOutline
    ///
    /// Render per face outline in hidden line draw style (Warning! this may cause slow down),.
    static const bool & getHiddenLinePerFaceOutline();
    static const bool & defaultHiddenLinePerFaceOutline();
    static void removeHiddenLinePerFaceOutline();
    static void setHiddenLinePerFaceOutline(const bool &v);
    static const char *docHiddenLinePerFaceOutline();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineSceneOutline
    ///
    /// Render outline of the whole scene.
    static const bool & getHiddenLineSceneOutline();
    static const bool & defaultHiddenLineSceneOutline();
    static void removeHiddenLineSceneOutline();
    static void setHiddenLineSceneOutline(const bool &v);
    static const char *docHiddenLineSceneOutline();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineOutlineWidth
    static const double & getHiddenLineOutlineWidth();
    static const double & defaultHiddenLineOutlineWidth();
    static void removeHiddenLineOutlineWidth();
    static void setHiddenLineOutlineWidth(const double &v);
    static const char *docHiddenLineOutlineWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineWidth
    static const double & getHiddenLineWidth();
    static const double & defaultHiddenLineWidth();
    static void removeHiddenLineWidth();
    static void setHiddenLineWidth(const double &v);
    static const char *docHiddenLineWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLinePointSize
    static const double & getHiddenLinePointSize();
    static const double & defaultHiddenLinePointSize();
    static void removeHiddenLinePointSize();
    static void setHiddenLinePointSize(const double &v);
    static const char *docHiddenLinePointSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineHideSeam
    ///
    /// Hide seam edges in hidden line draw style.
    static const bool & getHiddenLineHideSeam();
    static const bool & defaultHiddenLineHideSeam();
    static void removeHiddenLineHideSeam();
    static void setHiddenLineHideSeam(const bool &v);
    static const char *docHiddenLineHideSeam();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineHideVertex
    ///
    /// Hide vertex in hidden line draw style.
    static const bool & getHiddenLineHideVertex();
    static const bool & defaultHiddenLineHideVertex();
    static void removeHiddenLineHideVertex();
    static void setHiddenLineHideVertex(const bool &v);
    static const char *docHiddenLineHideVertex();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HiddenLineHideFace
    ///
    /// Hide face in hidden line draw style.
    static const bool & getHiddenLineHideFace();
    static const bool & defaultHiddenLineHideFace();
    static void removeHiddenLineHideFace();
    static void setHiddenLineHideFace(const bool &v);
    static const char *docHiddenLineHideFace();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter StatusMessageTimeout
    static const long & getStatusMessageTimeout();
    static const long & defaultStatusMessageTimeout();
    static void removeStatusMessageTimeout();
    static void setStatusMessageTimeout(const long &v);
    static const char *docStatusMessageTimeout();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowSync
    ///
    /// Specifies how to sync shadow draw style settings to opened document
    static const long & getShadowSync();
    static const long & defaultShadowSync();
    static void removeShadowSync();
    static void setShadowSync(const long &v);
    static const char *docShadowSync();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowFlatLines
    ///
    /// Draw object with 'Flat lines' style when shadow is enabled.
    static const bool & getShadowFlatLines();
    static const bool & defaultShadowFlatLines();
    static void removeShadowFlatLines();
    static void setShadowFlatLines(const bool &v);
    static const char *docShadowFlatLines();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowDisplayMode
    ///
    /// Override view object display mode when shadow is enabled.
    static const long & getShadowDisplayMode();
    static const long & defaultShadowDisplayMode();
    static void removeShadowDisplayMode();
    static void setShadowDisplayMode(const long &v);
    static const char *docShadowDisplayMode();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowSpotLight
    ///
    /// Whether to use spot light or directional light.
    static const bool & getShadowSpotLight();
    static const bool & defaultShadowSpotLight();
    static void removeShadowSpotLight();
    static void setShadowSpotLight(const bool &v);
    static const char *docShadowSpotLight();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowLightIntensity
    static const double & getShadowLightIntensity();
    static const double & defaultShadowLightIntensity();
    static void removeShadowLightIntensity();
    static void setShadowLightIntensity(const double &v);
    static const char *docShadowLightIntensity();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowLightDirectionX
    static const double & getShadowLightDirectionX();
    static const double & defaultShadowLightDirectionX();
    static void removeShadowLightDirectionX();
    static void setShadowLightDirectionX(const double &v);
    static const char *docShadowLightDirectionX();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowLightDirectionY
    static const double & getShadowLightDirectionY();
    static const double & defaultShadowLightDirectionY();
    static void removeShadowLightDirectionY();
    static void setShadowLightDirectionY(const double &v);
    static const char *docShadowLightDirectionY();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowLightDirectionZ
    static const double & getShadowLightDirectionZ();
    static const double & defaultShadowLightDirectionZ();
    static void removeShadowLightDirectionZ();
    static void setShadowLightDirectionZ(const double &v);
    static const char *docShadowLightDirectionZ();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowLightColor
    static const unsigned long & getShadowLightColor();
    static const unsigned long & defaultShadowLightColor();
    static void removeShadowLightColor();
    static void setShadowLightColor(const unsigned long &v);
    static const char *docShadowLightColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowShowGround
    ///
    /// Whether to show auto generated ground face. You can specify you own ground
    /// object by changing its view property 'ShadowStyle' to 'Shadowed', meaning
    /// that it will only receive but not cast shadow.
    static const bool & getShadowShowGround();
    static const bool & defaultShadowShowGround();
    static void removeShadowShowGround();
    static void setShadowShowGround(const bool &v);
    static const char *docShadowShowGround();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundBackFaceCull
    ///
    /// Whether to show the ground when viewing from under the ground face
    static const bool & getShadowGroundBackFaceCull();
    static const bool & defaultShadowGroundBackFaceCull();
    static void removeShadowGroundBackFaceCull();
    static void setShadowGroundBackFaceCull(const bool &v);
    static const char *docShadowGroundBackFaceCull();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundScale
    ///
    /// The auto generated ground face is determined by the scene bounding box
    /// multiplied by this scale
    static const double & getShadowGroundScale();
    static const double & defaultShadowGroundScale();
    static void removeShadowGroundScale();
    static void setShadowGroundScale(const double &v);
    static const char *docShadowGroundScale();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundColor
    static const unsigned long & getShadowGroundColor();
    static const unsigned long & defaultShadowGroundColor();
    static void removeShadowGroundColor();
    static void setShadowGroundColor(const unsigned long &v);
    static const char *docShadowGroundColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundBumpMap
    static const std::string & getShadowGroundBumpMap();
    static const std::string & defaultShadowGroundBumpMap();
    static void removeShadowGroundBumpMap();
    static void setShadowGroundBumpMap(const std::string &v);
    static const char *docShadowGroundBumpMap();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundTexture
    static const std::string & getShadowGroundTexture();
    static const std::string & defaultShadowGroundTexture();
    static void removeShadowGroundTexture();
    static void setShadowGroundTexture(const std::string &v);
    static const char *docShadowGroundTexture();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundTextureSize
    ///
    /// Specifies the physcal length of the ground texture image size.
    /// Texture mappings beyond this size will be wrapped around
    static const double & getShadowGroundTextureSize();
    static const double & defaultShadowGroundTextureSize();
    static void removeShadowGroundTextureSize();
    static void setShadowGroundTextureSize(const double &v);
    static const char *docShadowGroundTextureSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundTransparency
    ///
    /// Specifics the ground transparency. When set to 0, the non-shadowed part
    /// of the ground will be complete transparent, showing only the shadowed part
    /// of the ground with some transparency.
    static const double & getShadowGroundTransparency();
    static const double & defaultShadowGroundTransparency();
    static void removeShadowGroundTransparency();
    static void setShadowGroundTransparency(const double &v);
    static const char *docShadowGroundTransparency();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowGroundShading
    ///
    /// Render ground with shading. If disabled, the ground and the shadow casted
    /// on ground will not change shading when viewing in different angle.
    static const bool & getShadowGroundShading();
    static const bool & defaultShadowGroundShading();
    static void removeShadowGroundShading();
    static void setShadowGroundShading(const bool &v);
    static const char *docShadowGroundShading();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowExtraRedraw
    static const bool & getShadowExtraRedraw();
    static const bool & defaultShadowExtraRedraw();
    static void removeShadowExtraRedraw();
    static void setShadowExtraRedraw(const bool &v);
    static const char *docShadowExtraRedraw();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowSmoothBorder
    ///
    /// Specifies the blur raidus of the shadow edge. Higher number will result in
    /// slower rendering speed on scene change. Use a lower 'Precision' value to
    /// counter the effect.
    static const long & getShadowSmoothBorder();
    static const long & defaultShadowSmoothBorder();
    static void removeShadowSmoothBorder();
    static void setShadowSmoothBorder(const long &v);
    static const char *docShadowSmoothBorder();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowSpreadSize
    ///
    /// Specifies the spread size for a soft shadow. The resulting spread size is
    /// dependent on the model scale
    static const long & getShadowSpreadSize();
    static const long & defaultShadowSpreadSize();
    static void removeShadowSpreadSize();
    static void setShadowSpreadSize(const long &v);
    static const char *docShadowSpreadSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowSpreadSampleSize
    ///
    /// Specifies the sample size used for rendering shadow spread. A value 0
    /// corresponds to a sampling square of 2x2. And 1 corresponds to 3x3, etc.
    /// The bigger the size the slower the rendering speed. You can use a lower
    /// 'Precision' value to counter the effect.
    static const long & getShadowSpreadSampleSize();
    static const long & defaultShadowSpreadSampleSize();
    static void removeShadowSpreadSampleSize();
    static void setShadowSpreadSampleSize(const long &v);
    static const char *docShadowSpreadSampleSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowPrecision
    ///
    /// Specifies shadow precision. This parameter affects the internal texture
    /// size used to hold the casted shadows. You might want a bigger texture if
    /// you want a hard shadow but a smaller one for soft shadow.
    static const double & getShadowPrecision();
    static const double & defaultShadowPrecision();
    static void removeShadowPrecision();
    static void setShadowPrecision(const double &v);
    static const char *docShadowPrecision();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowEpsilon
    ///
    /// Epsilon is used to offset the shadow map depth from the model depth.
    /// Should be set to as low a number as possible without causing flickering
    /// in the shadows or on non-shadowed objects.
    static const double & getShadowEpsilon();
    static const double & defaultShadowEpsilon();
    static void removeShadowEpsilon();
    static void setShadowEpsilon(const double &v);
    static const char *docShadowEpsilon();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowThreshold
    ///
    /// Can be used to avoid light bleeding in merged shadows cast from different objects.
    static const double & getShadowThreshold();
    static const double & defaultShadowThreshold();
    static void removeShadowThreshold();
    static void setShadowThreshold(const double &v);
    static const char *docShadowThreshold();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowBoundBoxScale
    ///
    /// Scene bounding box is used to determine the scale of the shadow texture.
    /// You can increase the bounding box scale to avoid execessive clipping of
    /// shadows when viewing up close in certain angle.
    static const double & getShadowBoundBoxScale();
    static const double & defaultShadowBoundBoxScale();
    static void removeShadowBoundBoxScale();
    static void setShadowBoundBoxScale(const double &v);
    static const char *docShadowBoundBoxScale();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowMaxDistance
    ///
    /// Specifics the clipping distance for when rendering shadows.
    /// You can increase the bounding box scale to avoid execessive
    /// clipping of shadows when viewing up close in certain angle.
    static const double & getShadowMaxDistance();
    static const double & defaultShadowMaxDistance();
    static void removeShadowMaxDistance();
    static void setShadowMaxDistance(const double &v);
    static const char *docShadowMaxDistance();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowTransparentShadow
    ///
    /// Whether to cast shadow from transparent objects.
    static const bool & getShadowTransparentShadow();
    static const bool & defaultShadowTransparentShadow();
    static void removeShadowTransparentShadow();
    static void setShadowTransparentShadow(const bool &v);
    static const char *docShadowTransparentShadow();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShadowUpdateGround
    ///
    /// Auto update shadow ground on scene changes. You can manually
    /// update the ground by using the 'Fit view' command
    static const bool & getShadowUpdateGround();
    static const bool & defaultShadowUpdateGround();
    static void removeShadowUpdateGround();
    static void setShadowUpdateGround(const bool &v);
    static const char *docShadowUpdateGround();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PropertyViewTimer
    static const unsigned long & getPropertyViewTimer();
    static const unsigned long & defaultPropertyViewTimer();
    static void removePropertyViewTimer();
    static void setPropertyViewTimer(const unsigned long &v);
    static const char *docPropertyViewTimer();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter HierarchyAscend
    ///
    /// Enable selection of upper hierarchy by repeatedly click some already
    /// selected sub-element.
    static const bool & getHierarchyAscend();
    static const bool & defaultHierarchyAscend();
    static void removeHierarchyAscend();
    static void setHierarchyAscend(const bool &v);
    static const char *docHierarchyAscend();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter CommandHistorySize
    ///
    /// Maximum number of commands saved in history
    static const long & getCommandHistorySize();
    static const long & defaultCommandHistorySize();
    static void removeCommandHistorySize();
    static void setCommandHistorySize(const long &v);
    static const char *docCommandHistorySize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuIconSize
    ///
    /// Pie menu icon size
    static const long & getPieMenuIconSize();
    static const long & defaultPieMenuIconSize();
    static void removePieMenuIconSize();
    static void setPieMenuIconSize(const long &v);
    static const char *docPieMenuIconSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuRadius
    ///
    /// Pie menu radius
    static const long & getPieMenuRadius();
    static const long & defaultPieMenuRadius();
    static void removePieMenuRadius();
    static void setPieMenuRadius(const long &v);
    static const char *docPieMenuRadius();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuTriggerRadius
    ///
    /// Pie menu hover trigger radius
    static const long & getPieMenuTriggerRadius();
    static const long & defaultPieMenuTriggerRadius();
    static void removePieMenuTriggerRadius();
    static void setPieMenuTriggerRadius(const long &v);
    static const char *docPieMenuTriggerRadius();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuFontSize
    ///
    /// Pie menu font size
    static const long & getPieMenuFontSize();
    static const long & defaultPieMenuFontSize();
    static void removePieMenuFontSize();
    static void setPieMenuFontSize(const long &v);
    static const char *docPieMenuFontSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuTriggerDelay
    ///
    /// Pie menu sub-menu hover trigger delay, 0 to disable
    static const long & getPieMenuTriggerDelay();
    static const long & defaultPieMenuTriggerDelay();
    static void removePieMenuTriggerDelay();
    static void setPieMenuTriggerDelay(const long &v);
    static const char *docPieMenuTriggerDelay();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuTriggerAction
    ///
    /// Pie menu action trigger on hover
    static const bool & getPieMenuTriggerAction();
    static const bool & defaultPieMenuTriggerAction();
    static void removePieMenuTriggerAction();
    static void setPieMenuTriggerAction(const bool &v);
    static const char *docPieMenuTriggerAction();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuAnimationDuration
    ///
    /// Pie menu animation duration, 0 to disable
    static const long & getPieMenuAnimationDuration();
    static const long & defaultPieMenuAnimationDuration();
    static void removePieMenuAnimationDuration();
    static void setPieMenuAnimationDuration(const long &v);
    static const char *docPieMenuAnimationDuration();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuAnimationCurve
    ///
    /// Pie menu animation curve type
    static const long & getPieMenuAnimationCurve();
    static const long & defaultPieMenuAnimationCurve();
    static void removePieMenuAnimationCurve();
    static void setPieMenuAnimationCurve(const long &v);
    static const char *docPieMenuAnimationCurve();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuCenterRadius
    ///
    /// Pie menu center circle radius, 0 to disable
    static const long & getPieMenuCenterRadius();
    static const long & defaultPieMenuCenterRadius();
    static void removePieMenuCenterRadius();
    static void setPieMenuCenterRadius(const long &v);
    static const char *docPieMenuCenterRadius();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PieMenuPopup
    ///
    /// Show pie menu as a popup widget, disable it to work around some graphics driver problem
    static const bool & getPieMenuPopup();
    static const bool & defaultPieMenuPopup();
    static void removePieMenuPopup();
    static void setPieMenuPopup(const bool &v);
    static const char *docPieMenuPopup();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter StickyTaskControl
    ///
    /// Makes the task dialog buttons stay at top or bottom of task view.
    static const bool & getStickyTaskControl();
    static const bool & defaultStickyTaskControl();
    static void removeStickyTaskControl();
    static void setStickyTaskControl(const bool &v);
    static const char *docStickyTaskControl();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ColorOnTop
    ///
    /// Show object on top when editing its color.
    static const bool & getColorOnTop();
    static const bool & defaultColorOnTop();
    static void removeColorOnTop();
    static void setColorOnTop(const bool &v);
    static const char *docColorOnTop();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter AutoSortWBList
    ///
    /// Sort workbench entries by their names in the combo box.
    static const bool & getAutoSortWBList();
    static const bool & defaultAutoSortWBList();
    static void removeAutoSortWBList();
    static void setAutoSortWBList(const bool &v);
    static const char *docAutoSortWBList();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter MaxCameraAnimatePeriod
    ///
    /// Maximum camera move animation duration in milliseconds.
    static const long & getMaxCameraAnimatePeriod();
    static const long & defaultMaxCameraAnimatePeriod();
    static void removeMaxCameraAnimatePeriod();
    static void setMaxCameraAnimatePeriod(const long &v);
    static const char *docMaxCameraAnimatePeriod();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter TaskNoWheelFocus
    ///
    /// Do not accept wheel focus on input fields in task panels.
    static const bool & getTaskNoWheelFocus();
    static const bool & defaultTaskNoWheelFocus();
    static void removeTaskNoWheelFocus();
    static void setTaskNoWheelFocus(const bool &v);
    static const char *docTaskNoWheelFocus();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter GestureLongPressRotationCenter
    ///
    /// Set rotation center on press in gesture navigation mode.
    static const bool & getGestureLongPressRotationCenter();
    static const bool & defaultGestureLongPressRotationCenter();
    static void removeGestureLongPressRotationCenter();
    static void setGestureLongPressRotationCenter(const bool &v);
    static const char *docGestureLongPressRotationCenter();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter CheckWidgetPlacementOnRestore
    ///
    /// Check widget position and size on restore to make sure it is within the current screen.
    static const bool & getCheckWidgetPlacementOnRestore();
    static const bool & defaultCheckWidgetPlacementOnRestore();
    static void removeCheckWidgetPlacementOnRestore();
    static void setCheckWidgetPlacementOnRestore(const bool &v);
    static const char *docCheckWidgetPlacementOnRestore();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter TextCursorWidth
    ///
    /// Text cursor width in pixel.
    static const long & getTextCursorWidth();
    static const long & defaultTextCursorWidth();
    static void removeTextCursorWidth();
    static void setTextCursorWidth(const long &v);
    static const char *docTextCursorWidth();
    static void onTextCursorWidthChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PreselectionToolTipCorner
    ///
    /// Preselection tool tip docking corner.
    static const long & getPreselectionToolTipCorner();
    static const long & defaultPreselectionToolTipCorner();
    static void removePreselectionToolTipCorner();
    static void setPreselectionToolTipCorner(const long &v);
    static const char *docPreselectionToolTipCorner();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PreselectionToolTipOffsetX
    ///
    /// Preselection tool tip x offset relative to its docking corner.
    static const long & getPreselectionToolTipOffsetX();
    static const long & defaultPreselectionToolTipOffsetX();
    static void removePreselectionToolTipOffsetX();
    static void setPreselectionToolTipOffsetX(const long &v);
    static const char *docPreselectionToolTipOffsetX();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PreselectionToolTipOffsetY
    ///
    /// Preselection tool tip y offset relative to its docking corner.
    static const long & getPreselectionToolTipOffsetY();
    static const long & defaultPreselectionToolTipOffsetY();
    static void removePreselectionToolTipOffsetY();
    static void setPreselectionToolTipOffsetY(const long &v);
    static const char *docPreselectionToolTipOffsetY();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter PreselectionToolTipFontSize
    ///
    /// Preselection tool tip font size. Set to 0 to use system default.
    static const long & getPreselectionToolTipFontSize();
    static const long & defaultPreselectionToolTipFontSize();
    static void removePreselectionToolTipFontSize();
    static void setPreselectionToolTipFontSize(const long &v);
    static const char *docPreselectionToolTipFontSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SectionFill
    ///
    /// Fill cross section plane.
    static const bool & getSectionFill();
    static const bool & defaultSectionFill();
    static void removeSectionFill();
    static void setSectionFill(const bool &v);
    static const char *docSectionFill();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SectionFillInvert
    ///
    /// Invert cross section plane fill color.
    static const bool & getSectionFillInvert();
    static const bool & defaultSectionFillInvert();
    static void removeSectionFillInvert();
    static void setSectionFillInvert(const bool &v);
    static const char *docSectionFillInvert();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SectionConcave
    ///
    /// Cross section in concave.
    static const bool & getSectionConcave();
    static const bool & defaultSectionConcave();
    static void removeSectionConcave();
    static void setSectionConcave(const bool &v);
    static const char *docSectionConcave();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter NoSectionOnTop
    ///
    /// Ignore section clip planes when rendering on top.
    static const bool & getNoSectionOnTop();
    static const bool & defaultNoSectionOnTop();
    static void removeNoSectionOnTop();
    static void setNoSectionOnTop(const bool &v);
    static const char *docNoSectionOnTop();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SectionHatchTextureScale
    ///
    /// Section filling texture image scale.
    static const double & getSectionHatchTextureScale();
    static const double & defaultSectionHatchTextureScale();
    static void removeSectionHatchTextureScale();
    static void setSectionHatchTextureScale(const double &v);
    static const char *docSectionHatchTextureScale();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SectionHatchTexture
    ///
    /// Section filling texture image path.
    static const std::string & getSectionHatchTexture();
    static const std::string & defaultSectionHatchTexture();
    static void removeSectionHatchTexture();
    static void setSectionHatchTexture(const std::string &v);
    static const char *docSectionHatchTexture();
    static void onSectionHatchTextureChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SectionHatchTextureEnable
    ///
    /// Enable section fill texture.
    static const bool & getSectionHatchTextureEnable();
    static const bool & defaultSectionHatchTextureEnable();
    static void removeSectionHatchTextureEnable();
    static void setSectionHatchTextureEnable(const bool &v);
    static const char *docSectionHatchTextureEnable();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SectionFillGroup
    ///
    /// Render cross section filling of objects with similar materials together.
    /// Intersecting objects will act as boolean cut operation
    static const bool & getSectionFillGroup();
    static const bool & defaultSectionFillGroup();
    static void removeSectionFillGroup();
    static void setSectionFillGroup(const bool &v);
    static const char *docSectionFillGroup();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ShowClipPlane
    ///
    /// Show clip plane
    static const bool & getShowClipPlane();
    static const bool & defaultShowClipPlane();
    static void removeShowClipPlane();
    static void setShowClipPlane(const bool &v);
    static const char *docShowClipPlane();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ClipPlaneSize
    ///
    /// Clip plane visual size
    static const double & getClipPlaneSize();
    static const double & defaultClipPlaneSize();
    static void removeClipPlaneSize();
    static void setClipPlaneSize(const double &v);
    static const char *docClipPlaneSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ClipPlaneColor
    ///
    /// Clip plane color
    static const std::string & getClipPlaneColor();
    static const std::string & defaultClipPlaneColor();
    static void removeClipPlaneColor();
    static void setClipPlaneColor(const std::string &v);
    static const char *docClipPlaneColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ClipPlaneLineWidth
    ///
    /// Clip plane line width
    static const double & getClipPlaneLineWidth();
    static const double & defaultClipPlaneLineWidth();
    static void removeClipPlaneLineWidth();
    static void setClipPlaneLineWidth(const double &v);
    static const char *docClipPlaneLineWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter TransformOnTop
    static const bool & getTransformOnTop();
    static const bool & defaultTransformOnTop();
    static void removeTransformOnTop();
    static void setTransformOnTop(const bool &v);
    static const char *docTransformOnTop();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionColorDifference
    ///
    /// Color difference threshold for auto making distinct
    /// selection highlight color
    static const double & getSelectionColorDifference();
    static const double & defaultSelectionColorDifference();
    static void removeSelectionColorDifference();
    static void setSelectionColorDifference(const double &v);
    static const char *docSelectionColorDifference();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderCacheMergeCount
    ///
    /// Merge draw caches of multiple objects to reduce number of draw
    /// calls and improve render performance. Set zero to disable. Only
    /// effective when using experimental render cache.
    static const long & getRenderCacheMergeCount();
    static const long & defaultRenderCacheMergeCount();
    static void removeRenderCacheMergeCount();
    static void setRenderCacheMergeCount(const long &v);
    static const char *docRenderCacheMergeCount();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderCacheMergeCountMin
    ///
    /// Internal use to limit the render cache merge count
    static const long & getRenderCacheMergeCountMin();
    static const long & defaultRenderCacheMergeCountMin();
    static void removeRenderCacheMergeCountMin();
    static void setRenderCacheMergeCountMin(const long &v);
    static const char *docRenderCacheMergeCountMin();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderCacheMergeCountMax
    ///
    /// Maximum draw crash merges on any hierarchy. Zero means no limit.
    static const long & getRenderCacheMergeCountMax();
    static const long & defaultRenderCacheMergeCountMax();
    static void removeRenderCacheMergeCountMax();
    static void setRenderCacheMergeCountMax(const long &v);
    static const char *docRenderCacheMergeCountMax();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderCacheMergeDepthMax
    ///
    /// Maximum hierarchy depth that the cache merge can happen. Less than 0 means no limit.
    static const long & getRenderCacheMergeDepthMax();
    static const long & defaultRenderCacheMergeDepthMax();
    static void removeRenderCacheMergeDepthMax();
    static void setRenderCacheMergeDepthMax(const long &v);
    static const char *docRenderCacheMergeDepthMax();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderCacheMergeDepthMin
    ///
    /// Minimum hierarchy depth that the cache merge can happen.
    static const long & getRenderCacheMergeDepthMin();
    static const long & defaultRenderCacheMergeDepthMin();
    static void removeRenderCacheMergeDepthMin();
    static void setRenderCacheMergeDepthMin(const long &v);
    static const char *docRenderCacheMergeDepthMin();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderHighlightPolygonOffsetFactor
    static const double & getRenderHighlightPolygonOffsetFactor();
    static const double & defaultRenderHighlightPolygonOffsetFactor();
    static void removeRenderHighlightPolygonOffsetFactor();
    static void setRenderHighlightPolygonOffsetFactor(const double &v);
    static const char *docRenderHighlightPolygonOffsetFactor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter RenderHighlightPolygonOffsetUnits
    static const double & getRenderHighlightPolygonOffsetUnits();
    static const double & defaultRenderHighlightPolygonOffsetUnits();
    static void removeRenderHighlightPolygonOffsetUnits();
    static void setRenderHighlightPolygonOffsetUnits(const double &v);
    static const char *docRenderHighlightPolygonOffsetUnits();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ForceSolidSingleSideLighting
    ///
    /// Force single side lighting on solid. This can help visualizing invalid
    /// solid shapes with flipped normals.
    static const bool & getForceSolidSingleSideLighting();
    static const bool & defaultForceSolidSingleSideLighting();
    static void removeForceSolidSingleSideLighting();
    static void setForceSolidSingleSideLighting(const bool &v);
    static const char *docForceSolidSingleSideLighting();
    static void onForceSolidSingleSideLightingChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultFontSize
    static const long & getDefaultFontSize();
    static const long & defaultDefaultFontSize();
    static void removeDefaultFontSize();
    static void setDefaultFontSize(const long &v);
    static const char *docDefaultFontSize();
    static void onDefaultFontSizeChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter EnableTaskPanelKeyTranslate
    static const bool & getEnableTaskPanelKeyTranslate();
    static const bool & defaultEnableTaskPanelKeyTranslate();
    static void removeEnableTaskPanelKeyTranslate();
    static void setEnableTaskPanelKeyTranslate(const bool &v);
    static const char *docEnableTaskPanelKeyTranslate();
    static void onEnableTaskPanelKeyTranslateChanged();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter EnableMenuBarCheckBox
    static const bool & getEnableMenuBarCheckBox();
    static const bool & defaultEnableMenuBarCheckBox();
    static void removeEnableMenuBarCheckBox();
    static void setEnableMenuBarCheckBox(const bool &v);
    static const char *docEnableMenuBarCheckBox();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter EnableBacklight
    static const bool & getEnableBacklight();
    static const bool & defaultEnableBacklight();
    static void removeEnableBacklight();
    static void setEnableBacklight(const bool &v);
    static const char *docEnableBacklight();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter BacklightColor
    static const unsigned long & getBacklightColor();
    static const unsigned long & defaultBacklightColor();
    static void removeBacklightColor();
    static void setBacklightColor(const unsigned long &v);
    static const char *docBacklightColor();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter BacklightIntensity
    static const double & getBacklightIntensity();
    static const double & defaultBacklightIntensity();
    static void removeBacklightIntensity();
    static void setBacklightIntensity(const double &v);
    static const char *docBacklightIntensity();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter OverrideSelectability
    ///
    /// Override object selectability to enable selection
    static const bool & getOverrideSelectability();
    static const bool & defaultOverrideSelectability();
    static void removeOverrideSelectability();
    static void setOverrideSelectability(const bool &v);
    static const char *docOverrideSelectability();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter SelectionStackSize
    ///
    /// Maximum selection history record size
    static const unsigned long & getSelectionStackSize();
    static const unsigned long & defaultSelectionStackSize();
    static void removeSelectionStackSize();
    static void setSelectionStackSize(const unsigned long &v);
    static const char *docSelectionStackSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter DefaultDrawStyle
    ///
    /// Default draw style of a new document
    static const long & getDefaultDrawStyle();
    static const long & defaultDefaultDrawStyle();
    static void removeDefaultDrawStyle();
    static void setDefaultDrawStyle(const long &v);
    static const char *docDefaultDrawStyle();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ToolTipIconSize
    ///
    /// Specifies the size of static icon image in tooltip. GIF animation
    /// will be shown in its original size. You can disable all images in
    /// the tooltip by setting this option to zero.
    static const long & getToolTipIconSize();
    static const long & defaultToolTipIconSize();
    static void removeToolTipIconSize();
    static void setToolTipIconSize(const long &v);
    static const char *docToolTipIconSize();
    //@}

    // Auto generated code (Tools/params_utils.py:139)
    //@{
    /// Accessor for parameter ToolTipDisable
    static const bool & getToolTipDisable();
    static const bool & defaultToolTipDisable();
    static void removeToolTipDisable();
    static void setToolTipDisable(const bool &v);
    static const char *docToolTipDisable();
    //@}

    // Auto generated code (Gui/ViewParams.py:457)
    static const std::vector<QString> AnimationCurveTypes;

    static void onViewParamChanged(const char *sReason);
//[[[end]]]

    static bool highlightIndicesOnFullSelect() {
        return getShowSelectionOnTop() && getPartialHighlightOnFullSelect();
    }

    static int appDefaultFontSize();

    static void useRenderer(bool enable);
    static bool isUsingRenderer();
    static bool hiddenLineSelectionOnTop();
    static bool highlightPick();
    static void init();
    static void refreshRenderCache();


/*[[[cog
ViewParams.declare_end()
]]]*/

// Auto generated code (Tools/params_utils.py:179)
}; // class ViewParams
} // namespace Gui

// Auto generated code (Gui/ViewParams.py:467)
namespace Gui {
/// Obtain all draw style names, terminated by nullptr entry.
GuiExport const char **drawStyleNames();
/// Obtain draw style name from index. Returns nullptr if out of range.
GuiExport const char *drawStyleNameFromIndex(int index);
/// Obtain draw style index from name. Returns -1 for invalid name.
GuiExport int drawStyleIndexFromName(const char *);
/// Obtain documentation of a draw style.
GuiExport const char *drawStyleDocumentation(int index);
} // namespace Gui
//[[[end]]]

#endif // GUI_VIEW_PARAMS_H
