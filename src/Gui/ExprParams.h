/****************************************************************************
 *   Copyright (c) 2020 Zheng Lei (realthunder) <realthunder.dev@gmail.com> *
 *                                                                          *
 *   This file is part of the FreeCAD CAx development system.               *
 *                                                                          *
 *   This library is free software; you can redistribute it and/or          *
 *   modify it under the terms of the GNU Library General Public            *
 *   License as published by the Free Software Foundation; either           *
 *   version 2 of the License, or (at your option) any later version.       *
 *                                                                          *
 *   This library  is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *   GNU Library General Public License for more details.                   *
 *                                                                          *
 *   You should have received a copy of the GNU Library General Public      *
 *   License along with this library; see the file COPYING.LIB. If not,     *
 *   write to the Free Software Foundation, Inc., 59 Temple Place,          *
 *   Suite 330, Boston, MA  02111-1307, USA                                 *
 *                                                                          *
 ****************************************************************************/

#ifndef GUI_EXPR_PARAMS_H
#define GUI_EXPR_PARAMS_H

/*[[[cog
import ExprParams
ExprParams.declare()
]]]*/

// Auto generated code (Tools/params_utils.py:68)
#include <Base/Parameter.h>


// Auto generated code (Tools/params_utils.py:74)
namespace Gui {
/** Convenient class to obtain expression related parameters

 * The parameters are under group "User parameter:BaseApp/Preferences/Expression"
 *
 * This class is auto generated by Gui/ExprParams.py. Modify that file
 * instead of this one, if you want to add any parameter. You need
 * to install Cog Python package for code generation:
 * @code
 *     pip install cogapp
 * @endcode
 *
 * Once modified, you can regenerate the header and the source file,
 * @code
 *     python3 -m cogapp -r Gui/ExprParams.h Gui/ExprParams.cpp
 * @endcode
 *
 * You can add a new parameter by adding lines in Gui/ExprParams.py. Available
 * parameter types are 'Int, UInt, String, Bool, Float'. For example, to add
 * a new Int type parameter,
 * @code
 *     ParamInt(parameter_name, default_value, documentation, on_change=False)
 * @endcode
 *
 * If there is special handling on parameter change, pass in on_change=True.
 * And you need to provide a function implementation in Gui/ExprParams.cpp with
 * the following signature.
 * @code
 *     void ExprParams:on<parameter_name>Changed()
 * @endcode
 */
class GuiExport ExprParams {
public:
    static ParameterGrp::handle getHandle();

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter CompleterCaseSensitive
    ///
    /// Expression completer with case sensitive
    static const bool & getCompleterCaseSensitive();
    static const bool & defaultCompleterCaseSensitive();
    static void removeCompleterCaseSensitive();
    static void setCompleterCaseSensitive(const bool &v);
    static const char *docCompleterCaseSensitive();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter CompleterMatchExact
    ///
    /// Expression completer match exact
    static const bool & getCompleterMatchExact();
    static const bool & defaultCompleterMatchExact();
    static void removeCompleterMatchExact();
    static void setCompleterMatchExact(const bool &v);
    static const char *docCompleterMatchExact();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter CompleterUnfiltered
    ///
    /// Expression completer unfiltered completion mode
    static const bool & getCompleterUnfiltered();
    static const bool & defaultCompleterUnfiltered();
    static void removeCompleterUnfiltered();
    static void setCompleterUnfiltered(const bool &v);
    static const char *docCompleterUnfiltered();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter NoSystemBackground
    ///
    /// Enable in place expression editing
    static const bool & getNoSystemBackground();
    static const bool & defaultNoSystemBackground();
    static void removeNoSystemBackground();
    static void setNoSystemBackground(const bool &v);
    static const char *docNoSystemBackground();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter EditorTrigger
    ///
    /// Expression editor trigger character
    static const std::string & getEditorTrigger();
    static const std::string & defaultEditorTrigger();
    static void removeEditorTrigger();
    static void setEditorTrigger(const std::string &v);
    static const char *docEditorTrigger();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter AutoHideEditorIcon
    ///
    /// Only show editor icon on mouse over
    static const bool & getAutoHideEditorIcon();
    static const bool & defaultAutoHideEditorIcon();
    static void removeAutoHideEditorIcon();
    static void setAutoHideEditorIcon(const bool &v);
    static const char *docAutoHideEditorIcon();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter AllowReturn
    ///
    /// Allow return key in expression edit box
    static const bool & getAllowReturn();
    static const bool & defaultAllowReturn();
    static void removeAllowReturn();
    static void setAllowReturn(const bool &v);
    static const char *docAllowReturn();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter EvalFuncOnEdit
    ///
    /// Auto evaluate function call when editing expression
    static const bool & getEvalFuncOnEdit();
    static const bool & defaultEvalFuncOnEdit();
    static void removeEvalFuncOnEdit();
    static void setEvalFuncOnEdit(const bool &v);
    static const char *docEvalFuncOnEdit();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter EditDialogWidth
    static const long & getEditDialogWidth();
    static const long & defaultEditDialogWidth();
    static void removeEditDialogWidth();
    static void setEditDialogWidth(const long &v);
    static const char *docEditDialogWidth();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter EditDialogHeight
    static const long & getEditDialogHeight();
    static const long & defaultEditDialogHeight();
    static void removeEditDialogHeight();
    static void setEditDialogHeight(const long &v);
    static const char *docEditDialogHeight();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter EditDialogTextHeight
    static const long & getEditDialogTextHeight();
    static const long & defaultEditDialogTextHeight();
    static void removeEditDialogTextHeight();
    static void setEditDialogTextHeight(const long &v);
    static const char *docEditDialogTextHeight();
    //@}

    // Auto generated code (Tools/params_utils.py:118)
    //@{
    /// Accessor for parameter EditDialogBGAlpha
    ///
    /// Expression editor background opacity value when using in place editing
    static const long & getEditDialogBGAlpha();
    static const long & defaultEditDialogBGAlpha();
    static void removeEditDialogBGAlpha();
    static void setEditDialogBGAlpha(const long &v);
    static const char *docEditDialogBGAlpha();
    //@}

// Auto generated code (Tools/params_utils.py:146)
}; // class ExprParams
} // namespace Gui
//[[[end]]]
#endif // GUI_EXPR_PARAMS_H
